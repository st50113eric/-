package sele_1_package;
//import org.apache.commons.io.FileUtils;
import org.jsoup.*;
//import org.jsoup.helper.*;
import org.jsoup.nodes.*;
import org.jsoup.select.*;
import java.util.concurrent.TimeUnit;
import org.testng.annotations.*;
import static org.testng.Assert.*;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import java.io.*;
import java.util.*;
import java.util.NoSuchElementException;

public class selenium_1_version {	
    public static WebDriver driver;
    public static boolean acceptNextAlert = true;
    
    //Change the string of content frequently use it, And does not generate new unused objects
    public StringBuffer verificationErrors = new StringBuffer();
    
    //The annotated method will be run before the first test method in the current class is invoked.    
    @BeforeClass(alwaysRun = true)  
    public void setUp() throws Exception {  
	    driver = new ChromeDriver();
	    System.setProperty("webdriver.chrome.driver","chromedriver.exe");
	    
	    //This wait usually applies to the preset wait for the entire program    
	    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);  
	}    
    @Test 
    public void testselenium_1_version() throws Exception {
    	
    	//connect config.properties 	
    	InputStream is = selenium_1_version.class.getResourceAsStream("/config.properties");
		Properties properties = new Properties();
		properties.load(is);	
		String failUpTest = properties.getProperty("failUpTest");
		String URL = properties.getProperty("URL");
		String unitRetryCount = properties.getProperty("unitRetryCount");
		String account = properties.getProperty("account");
		String psd = properties.getProperty("psd");
		String strPrevious = properties.getProperty("strPrevious");
		String strAfter = properties.getProperty("strAfter");
		String keepSetting = properties.getProperty("keepSetting");
		String selectAll = properties.getProperty("selectAll");
		String APNumber = properties.getProperty("APNumber");
		int unitRetryCountInt = Integer.valueOf(unitRetryCount.trim()); // delete back whitespace
		int keepSettingInt = Integer.valueOf(keepSetting.trim());
		int selectAllInt = Integer.valueOf(selectAll.trim());
		int failUpTestInt = Integer.valueOf(failUpTest.trim());
		int APNumberInt = Integer.valueOf(APNumber.trim());
		boolean isBrowserOpen = false; 
		boolean isStatusOpen = false;
		boolean isTopologyOpen = false;
		boolean isVerifyOpen = false;
		boolean isVersionCompare = false;	
		
		//fail up test count		
		for(int k=1 ; k<=failUpTestInt ; k++) {
			System.out.println("Opening the chrome browser...");
			System.out.println(URL);
			driver.get(URL);	  
			WebElement beforeLogin =driver.findElement(By.id("content"));		
		    int statusLogin = 0;
				for( int i = 1 ; i<=unitRetryCountInt ; i++) {	
				    String beforeLoginElement = beforeLogin.getText();
					if(beforeLoginElement.equals("Authorization Required")) {	
						isBrowserOpen= true;
						statusLogin = 1;
						break;	
					}		
					else{
						System.out.println("check");
						statusLogin = 2;
						TimeUnit.SECONDS.sleep(1); 
					}		
				}
			switch(statusLogin) {
		    		case 1 :
		    			System.out.println("Login screen is loaded successfully");
		    			break;
		    		case 2 :
		    			continue;
		    }
			
			driver.findElement(By.name("luci_username")).click();		    
		    //clean the textbox	    
			driver.findElement(By.name("luci_username")).clear();   
		    driver.findElement(By.name("luci_username")).sendKeys(account);
			driver.findElement(By.name("luci_password")).clear();
			driver.findElement(By.name("luci_password")).sendKeys(psd);
			driver.findElement(By.xpath("//input[@value='Login']")).click();
			
			//Catch current raw html and jsoup need this code		
			Document statusPage = Jsoup.parse(driver.getPageSource());     
			Element firmwareVers = statusPage.select("fieldset").select("table").first().select("tr").get(2);					
			String firmwareVerion=firmwareVers.select("td").get(0).text();
			String firmwareVersionDecision = firmwareVers.select("td").get(1).text();		
			int statusStatus = 0;
			for ( int i = 1 ; i<=unitRetryCountInt ; i++) { 
			    if(firmwareVerion.equals("Firmware Version")) { 
			    	isStatusOpen = true; 
			    	statusStatus=1;
			    	break; 
			    } 
			    else{
					System.out.println("check");
					statusStatus=2;
					TimeUnit.SECONDS.sleep(1); 
			    }
			}
			switch(statusStatus) {
		    	case 1 :
		    		System.out.println("Status page is loaded successfully");
		    		break;
		    	case 2 :
		    		continue;
	        }
			
			//get the current version and compare it at last		
			System.out.println("Firmware Version" + ":" + firmwareVersionDecision);
			String testCorrectVersion=firmwareVersionDecision.substring(firmwareVersionDecision.length()-13,firmwareVersionDecision.length()-1);		
			
			//SON->Topology			
			driver.findElement(By.linkText("SON")).click();
			driver.findElement(By.linkText("Topology")).click();									
			Document topologyPage = Jsoup.parse(driver.getPageSource());
			Elements topologyAbove = topologyPage.select("#content");
			String topologyTitle = topologyAbove.text();			
			int statusTopology=0;
		    for ( int i = 1 ; i<=unitRetryCountInt ; i++) { 
			    if(topologyTitle.equals("Topology")) { 
			    	isTopologyOpen = true;
			    	statusTopology=1;
			    	break; 
			    } 
			    else{
			    	System.out.println("check");
			    	statusTopology=2;
			    	TimeUnit.SECONDS.sleep(1); 
			    }
		     }
		    switch(statusTopology) {
				case 1 :
					System.out.println("Topology page is loaded successfully");
					break;
				case 2 :
					continue;
	        }
		    
		    //buffer of the print activeAP time		    
		    TimeUnit.SECONDS.sleep(2); 
		    
		    //print all device information from SON->Topology
		    //announce list  		    
		    System.out.println("Finding ActiveAP...");
		    ArrayList<String> topologyArray = new ArrayList<String>();
		    for (int i=1; i>=1; i++) {
		    	
		    	//find the last element check if it is exist
		    	WebElement activeAPLast = driver.findElement(By.xpath("//*[@id=\"active-ap-lst\"]/tbody/tr["+(APNumberInt+1)+"]"));
		    	boolean status= activeAPLast.isDisplayed();
		    	if(status) {
		    		System.out.println("All active AP is found");
		    		for(int j=2 ; j<=(APNumberInt+1) ; j++) {
		    			WebElement APTable = driver.findElement(By.xpath("//*[@id=\"active-ap-lst\"]/tbody/tr["+ j +"]"));
	 			        String APTableDecision = APTable.getText();
	 			        topologyArray.add(APTableDecision);			  	        		  	        	  
		    		}
		    		if(topologyArray.size()==APNumberInt){
		    			
		    			//finish checking, print all activeAPs
		    			System.out.println(topologyArray);
		    			break;
		    		}	
		    	}
		    	else {
		    		driver.navigate().refresh();
		    	}	    	        	
//		       if(i==3) {
//		    	   selenium_1_version.checkBackHaul();  
//		       }	    	    
		        if(i==5) {
		        	fail("No finding activeAPs");
		        }
		        TimeUnit.SECONDS.sleep(1);		    	
	    	 }
		    
// JavaScript scrollIntoView() Method scrolls the scroll bar to the specified element position of the page		    
//	        WebElement activeAPTopic = driver.findElement(By.xpath("//table[@id='active-ap-lst']//tr[@class='cbi-section-table-row cbi-rowstyle-2']//td[@class='cbi-value-field']"));
//	 		((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView();", activeAPTopic);
//	 		try {
//	 			Thread.sleep(3000);
//	 		}catch (InterruptedException e) { 
//	 		    e.printStackTrace();
//	 		}
//		 	driver.manage().window().maximize();		
//		    File srcFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
//		    FileUtils.copyFile(srcFile,  new File("screenshot.png"));	  

		    //First, waiting for black screen and firmware update 	 				    
		    driver.findElement(By.linkText("SON")).click();
		    driver.findElement(By.linkText("Firmware")).click();
		    WebElement message = driver.findElement(By.xpath("//*[@id=\"holdon-message\"]"));	
			String messageDecision = message.getText();   
			System.out.println("Black screen is setting : " + messageDecision);
			System.out.println("Start finding AP...");
			System.out.println("-----------------------------------------------");
//			Document firmwarePage = Jsoup.parse(driver.getPageSource());
			
			//announce list to save the key of the dictionary
			Hashtable<String, String> dict = new Hashtable<String, String>();
	    	ArrayList<String> strList = new ArrayList<String>();
			for (int i=1; i>=1; i++) { 
		    	WebElement firmwareAP = driver.findElement(By.xpath("//*[@id=\"ap-version-lst\"]/tbody"));
		        String firmwareAPDecision = firmwareAP.getText();
		    	System.out.println("Check number "+ i + ":\n" + firmwareAPDecision);
		        CharSequence cs = "LM01";		   
		        if(firmwareAPDecision.contains(cs)) {
		        	try {
		        		
		        		//find the element until the set up APNumber
				    	WebDriverWait wait = new WebDriverWait(driver, 10);  	 
				    	WebElement AP = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//*[@id=\"ap-version-lst\"]/tbody/tr["+(APNumberInt+1)+"]/td[2]")));			    
				    	boolean statusDecision = AP.isDisplayed();
				    	if(statusDecision) {
				    		System.out.println("AP is found");
					    		for(int j=2 ; j<=(APNumberInt+1) ; j++) {
						    		WebElement APMac = driver.findElement(By.xpath("//*[@id=\"ap-version-lst\"]/tbody/tr["+ j +"]/td[2]"));
				  	        	    WebElement APVer = driver.findElement(By.xpath("//*[@id=\"ap-version-lst\"]/tbody/tr["+ j +"]/td[3]"));       	
				  	        	    String APMacAddress = APMac.getText();
				  	        	    String APVersion = APVer.getText();
				  	        	    
				  	        	    //announce list to save the key of the dictionary				  	        	   
				  	        	    strList.add(APMacAddress);		  	        	
				  	        	    dict.put(APMacAddress,APVersion); 
					    		}			    					    		
				    	}				    	
				    }catch(Exception e) {
				    	System.out.println("Not correspond, keep finding AP...");
				    }finally {
				    	if(strList.size()==APNumberInt) {				    
				    		 break;		        	        
			        	 }
		        	     else {
		        	    	strList.clear();
		        	    	dict.clear();
	        	        	driver.navigate().refresh(); 
		                }  
			        }			   
	           }
	           if(isAlertPresent()){
		    	   assertEquals(closeAlertAndGetItsText(), "WARNING : You will be redirected to the next page, please make sure you upload the correct firmware. Your current settings will be erased after flashing firmware.");
		       }
		       if(i==60) {
		           driver.navigate().refresh();  
		       }
		       if(i==80) {
		        	fail("No finding APs");
		       }
		       TimeUnit.SECONDS.sleep(1);		    	
	    	}
			System.out.println("The Firmware page is loaded successfully");			
//		    int repeat=0;
//			    do {
			
			//document auto updating			
		    File filePrevious = new File(strPrevious);	 
		    File fileAfter = new File(strAfter);				      
		    String currentVerionCompare = testCorrectVersion +".img";	
	        WebElement uploadElement = driver.findElement(By.id("image"));  // enter the file path onto the file-selection input field	        	  	       
		    if(currentVerionCompare.equals(filePrevious.getName())) {   		
		       	    uploadElement.sendKeys(strAfter);     	   
		    }
		    else if(currentVerionCompare.equals(fileAfter.getName())) {   		
		       	    uploadElement.sendKeys(strPrevious);
		    }
		    
		    //check keep setting box	    
	        switch(keepSettingInt) {
	           case 1 :
	        	   if(!driver.findElement(By.id("keep")).isSelected()){
	        		   driver.findElement(By.id("keep")).click();
	        		   System.out.println("Keep setting box is checked");       	   	  
	        	   }else {
	        		   System.out.println("Keep setting box is checked");
	        	   }
	        	   TimeUnit.SECONDS.sleep(1);
	        	   break;
	           case 2 :
	        	   if(driver.findElement(By.id("keep")).isSelected()){
	        		   driver.findElement(By.id("keep")).click();
	        		   System.out.println("Keep setting box is unchecked");      		  
	        	   }else{
	        		   System.out.println("Keep setting box is unchecked"); 
	        	   }
	        	   TimeUnit.SECONDS.sleep(1);
	        	   break;
	        }
	        
	        //check check_all box        
	        TimeUnit.SECONDS.sleep(2);
	        switch(selectAllInt) {
	           case 1 :
	        	   if(!driver.findElement(By.id("check_all")).isSelected()){
	        		   driver.findElement(By.id("check_all")).click();
	        		   System.out.println("Select all box is checked");       	   	  
	        	   }else {
	        		   System.out.println("Select all box is checked");
	        	   }
	        	   break;
	           case 2 :
	        	   if(driver.findElement(By.id("check_all")).isSelected()){
	        		   driver.findElement(By.id("check_all")).click();
	        		   System.out.println("Select all box is unchecked");      		  
	        	   }else {
	        		   System.out.println("Select all box is unchecked"); 
	        	   }
	        	   break;
	        }
	        
	        //press firmware update and procced	        
	        driver.findElement(By.xpath("(.//*[normalize-space(text()) and normalize-space(.)='Other Image:'])[1]/following::input[2]")).click();
	        assertEquals(closeAlertAndGetItsText(), "WARNING : You will be redirected to the next page, please make sure you upload the correct firmware. Your current settings will be erased after flashing firmware.");
	        System.out.println("Uploading image...");
	        Document firmwareUpdatePage = Jsoup.parse(driver.getPageSource());
	        Elements verify = firmwareUpdatePage.select("#content");
		    String firmwareVerify = verify.text();
		    int f_1=0;
		    for ( int i = 1 ; i<=unitRetryCountInt ; i++) {	
			   if(firmwareVerify.equals("Flash Firmware - Verify")) {	
				   isVerifyOpen= true;	  			
				   break;	
			  }		
			   else{
				   System.out.println("check");
				   TimeUnit.SECONDS.sleep(2);		
			   }
			}
		    switch(f_1) {
		       case 1 :
		    	   System.out.println("Verify page is loaded successfully.");
		    	   break;
		       case 2 :
			       continue;
	        }         
		    driver.findElement(By.xpath("//input[@value='Proceed']")).click();
		    
		 	//Wait for FW upgrade	    
		    int aboveCount = 0;
	        while(true) { 		    
			    try {	
			    	WebDriverWait wait = new WebDriverWait(driver, 60);
			    	System.out.println("Page refreshing...");    	
			    	aboveCount++;
			    	driver.navigate().refresh(); 
			    	
			    	//until find the account input textbox
			    	WebElement SearchText = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//*[@id=\"mainbody\"]/fieldset/fieldset/div[1]/div/input")));			    
			    	boolean status = SearchText.isDisplayed();
			    	if(status) {
			    		System.out.println("Element is found");
			    		break;				    		
			    	}
			    	else if(aboveCount>=20) {
			    		fail("Device updated fail");
			    	}
			    	
			    }catch(Exception e) {
			    	System.out.println("Element is not found");
			     }				   
	        }
	        
	        //login again        
	        driver.findElement(By.name("luci_username")).click();
			driver.findElement(By.name("luci_username")).clear();                        
		    driver.findElement(By.name("luci_username")).sendKeys(account);
			driver.findElement(By.name("luci_password")).clear();
			driver.findElement(By.name("luci_password")).sendKeys(psd);
			driver.findElement(By.xpath("//input[@value='Login']")).click();
			
			//goto status page to check correct version		
			Document loginPage2 = Jsoup.parse(driver.getPageSource());     
			Element firmwareVers2 = loginPage2.select("fieldset").select("table").first().select("tr").get(2); 	
			String firmwareVersion2 = firmwareVers2.select("td").get(0).text();
			String firmwareVersionDecision2 = firmwareVers2.select("td").get(1).text();			
			for ( int i = 1 ; i<=unitRetryCountInt ; i++) { 
			    if(firmwareVersion2.equals("Firmware Version")) { 
			    	isStatusOpen = true; 
			    	statusStatus=1;
			    	break; 
			    } 
			    else{
					System.out.println("check");
					statusStatus=2;
					TimeUnit.SECONDS.sleep(1); 
			    }
			}
			switch(statusStatus) {
		    	case 1 :
		    		System.out.println("Status page is loaded successfully");
		    		break;
		    	case 2 :
		    		continue;
	        }
			
			//currrent correct version 
		    System.out.println("Firmware Version" +":"+ firmwareVersionDecision2);
			String testCorrectVersion2=firmwareVersionDecision2.substring(firmwareVersionDecision2.length()-13,firmwareVersionDecision2.length()-1);			    
		    
			//goto SON->Topology and find the check version, the black screen again will still run and check		
     		driver.findElement(By.linkText("SON")).click();
		    driver.findElement(By.linkText("Firmware")).click();
		    WebElement message2 = driver.findElement(By.xpath("//*[@id=\"holdon-message\"]"));	
			String messageDecision2 = message2.getText();   
			System.out.println("Black screen is setting : " + messageDecision2);
			System.out.println("Start finding AP...");
			System.out.println("-----------------------------------------------");
			Hashtable<String, String> dict2 = new Hashtable<String, String>();
		    ArrayList<String>  strArray2 = new ArrayList<String>();
			for (int i=1; i>=1; i++) { 
		    	WebElement all_AP2 = driver.findElement(By.xpath("//*[@id=\"ap-version-lst\"]/tbody"));
		        String allAPDecision2 = all_AP2.getText();
		    	System.out.println(allAPDecision2);
		        CharSequence cs = "LM01";
		        System.out.println(i);
		        if(allAPDecision2.contains(cs)) {		        	
		        	System.out.println("AP is found");
				    	try {
				    		WebDriverWait wait = new WebDriverWait(driver, 10);
					    	System.out.println("Finding other APs...");    	 
					    	WebElement AP2 = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//*[@id=\"ap-version-lst\"]/tbody/tr["+(APNumberInt+1)+"]/td[2]")));			        	        			        		
						    boolean status = AP2.isDisplayed();			
						    	if(status) {				    		
						    		for(int j=2 ; j<=(APNumberInt+1) ; j++) {
							    		WebElement ap_mac2 = driver.findElement(By.xpath("//*[@id=\"ap-version-lst\"]/tbody/tr["+ j +"]/td[2]"));
					  	        	    WebElement ap_ver2 = driver.findElement(By.xpath("//*[@id=\"ap-version-lst\"]/tbody/tr["+ j +"]/td[3]"));       	
					  	        	    String ap_mac_address2 = ap_mac2.getText();
					  	        	    String ap_version2 = ap_ver2.getText();
							    		strArray2.add(ap_mac_address2);		  	        	
					  	        	    dict2.put(ap_mac_address2,ap_version2);
					  	        	    
					    		    }			    					    		
					    	   }
				    	}catch(Exception e) {
						    	System.out.println("Keep finding AP...");
					    }finally {
				        	if(strArray2.size()==APNumberInt) {	
				        		System.out.println("All AP is finded");
						    	break;		        	        
					        }
				        	else {
			        	        dict2.clear();
			        	        strArray2.clear();
			        	        driver.navigate().refresh(); 
				            } 
				        }			         
			   }
		       if(isAlertPresent()){
		    	   assertEquals(closeAlertAndGetItsText(), "WARNING : You will be redirected to the next page, please make sure you upload the correct firmware. Your current settings will be erased after flashing firmware.");
		       }
		       if(i==60) {
		           driver.navigate().refresh();  
		       }
		       if(i==80) {
		        	fail("No finding APs");
		       }
		       TimeUnit.SECONDS.sleep(1);		    	   	
			}
			
			//Using the current version to start to check each AP 		
			TimeUnit.SECONDS.sleep(3);
			for(int i=0 ; i<=(APNumberInt-1) ;i++) {
				
				//every AP find key to correspond value
			    if(dict2.get(strArray2.get(i)).equals(testCorrectVersion2)) {
			    	isVersionCompare = true;
			    	System.out.println(strArray2.get(i)+"version is correct");					    	
			    } 
			    else {
			    	isVersionCompare = false;
			    	System.out.println(strArray2.get(i)+dict2.get(strArray2.get(i))+" is version error");					    	
			    }
		    } 
		break;		
		}
		
		//fail test determine
	    assertTrue(isBrowserOpen,"Finish retrying user's setting counts, and can't find the element of \"Authorization Required\".");
	    assertTrue(isStatusOpen,"Finish retrying user's setting counts, and can't find the element of \"Firmware Version\"."); 
        assertTrue(isTopologyOpen,"Finish retrying user's setting counts, and can't find the element of \"Topology\".");
        assertTrue(isVerifyOpen,"Finish retrying user's setting counts, and can't find the element of \"Flash Firmware - Verify\".");
        assertTrue(isVersionCompare,"Update fail!!");
        System.out.println("Finish testing");
        
        //Quits the driver and closes every associated window. 
        driver.quit();
	}

    @AfterClass(alwaysRun = true)
    public void tearDown() throws Exception {
    	String verificationErrorString = verificationErrors.toString();
    	if (!"".equals(verificationErrorString)) {
	    	fail(verificationErrorString);
	    }
    }
    
//check backhaul    
//    public static void checkBackHaul() throws Exception {			
//    	InputStream is = selenium_1_version.class.getResourceAsStream("/config.properties");
//		Properties properties = new Properties();
//		properties.load(is);
//		String APbackhaul = properties.getProperty("APbackhaul");
//		is.close();	
//		driver.findElement(By.linkText("SON")).click();
//	    driver.findElement(By.linkText("Configuration")).click();
//	    driver.findElement(By.linkText("Advanced Settings")).click();		    
//	    String backhaul = driver.findElement(By.id("cbid.wnc-son.backhaul.ssid")).getAttribute("value");
//		if(!backhaul.equals(APbackhaul)) {
//		driver.findElement(By.id("cbid.wnc-son.backhaul.ssid")).clear();
//		driver.findElement(By.id("cbid.wnc-son.backhaul.ssid")).sendKeys(APbackhaul);
//		driver.findElement(By.name("cbi.apply")).click();
//		System.out.println("Waiting the settings...");
//			if(isAlertPresent()){
//		    	   assertEquals(closeAlertAndGetItsText(), "WARNING : It may take several minutes to re-establish the SON topology. Please wait patiently.");
//		    }
//		TimeUnit.SECONDS.sleep(13);
//		driver.findElement(By.linkText("SON")).click();
//		driver.findElement(By.linkText("Topology")).click();
//		TimeUnit.SECONDS.sleep(1);
//		}
//    }
    
    //while encounter the alert, press accept 
    public static String closeAlertAndGetItsText() {
    	try {
    		Alert alert = driver.switchTo().alert();
    		String alertText = alert.getText();
    		if (acceptNextAlert) {
    			alert.accept();
    		}else {
    			alert.dismiss();
    			}
    		return alertText;
    			} finally {
    				acceptNextAlert = true;
    			}
   }
    
    //Determine if an element exists 
    public boolean isElementPresent(By by) { 
    try {
    	driver.findElement(by);
    	return true;
    	} catch (NoSuchElementException e) {
    		return false;
    	}
    }
    
    //Determine if Alert exists   
    public static boolean isAlertPresent() {       
    	try {
    		driver.switchTo().alert();           
    		return true;
    	} catch (NoAlertPresentException e) {
    		return false;
    	}
    }    
}



 
